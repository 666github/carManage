using CarManageSystem.Extension;
using CarManageSystem.helper;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.SessionState;

namespace CarManageSystem.handler
{
    /// <summary>
    /// BorrowCar 的摘要说明
    /// </summary>
    public class BorrowCar : IHttpHandler,IRequiresSessionState
    {

        public void ProcessRequest(HttpContext context)
        {
            context.Response.ContentType = "text/plain";
            //是否登陆
            if (!CheckHelper.IsLogin(context))
                return;

            string carNumber = context.Request["carNumber"].Trim();
            string uAccount = Convert.ToString(context.Session["account"]);

            string useCarTime = context.Request["useCarTime"].Trim();
            string expectReturnTime = context.Request["expectReturnTime"].Trim();
            string purpose = context.Request["purpose"].Trim();
            string destination = context.Request["destination"].Trim();
            string cause = context.Request["cause"].Trim();

            dynamic json = new JObject();

            var now = DateTime.Now;
            if(Convert.ToDateTime(useCarTime)>now.AddHours(2))
            {
                json.state = "错误:预约时间超出两小时范围";
                context.Response.Write(json.ToString());
                return;
            }

            using (cmsdbEntities cms = new cmsdbEntities())
            {
                var currentUser = cms.user.FirstOrDefault(s => s.Account == uAccount);
                var tempCar = cms.carinfo.FirstOrDefault(s => s.CarNumber == carNumber);
                var other = 0;

                //验证假日用车
                if(tempCar==null)
                {
                    json.state = "错误:没有此车辆信息，请刷新重试";
                    context.Response.Write(json.ToString());
                    return;
                }
                if (tempCar.HolodayStart != null && tempCar.HolodayEnd != null)
                {
                    if (tempCar.HolodayStart < now && tempCar.HolodayEnd > now)
                    {
                        json.state = "错误:此车假期期间不可用";
                        context.Response.Write(json.ToString());
                        return;
                    }
                }
                //只能借一个 
                var currentCar = cms.carinfo.FirstOrDefault(s => s.CurrentUser == uAccount);
                if (currentCar != null)
                {
                    json.state = "错误:您已经预约过车辆，请换车后再预约";
                    context.Response.Write(json.ToString());
                    return;
                }

                if (tempCar.CarState != 0)
                {
                    json.state = "错误:此车不是空闲状态，请刷新页面重试";
                    context.Response.Write(json.ToString());
                    return;
                }
                else
                {
                    if (currentUser.Department==tempCar.DepartmentId)
                    {
                        tempCar.CurrentUser = uAccount;
                        tempCar.CarState = 1;
                        currentUser.state = 1;
                        //tempCar.CarState = 2; //临时改的，方便演示
                    }
                    else
                    {
                        other = 1;
                    }
                }
                
               
                var brinfo = new borrowregister()
                {
                    CarNumber = carNumber,
                    UseCarTime = Convert.ToDateTime(useCarTime),
                    ExpectReturnTime = Convert.ToDateTime(expectReturnTime),
                    User = uAccount,
                    Department = cms.carinfo.FirstOrDefault(ss => ss.CarNumber == tempCar.CarNumber).DepartmentId,
                    Purposes = purpose,
                    Cause = cause,
                    Destination = destination,
                    UniqueCode = Guid.NewGuid().ToString(),
                    BorrowState=Convert.ToInt16(other)==0?1:0,
                    BorrowTime=DateTime.Now
                };
                cms.borrowregister.Add(brinfo);
                
                cms.SaveChanges();
                
                json.state = "success";
                context.Response.Write(json.ToString());
            }
        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
    }
}